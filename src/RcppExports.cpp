// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// GetRdConsumer
SEXP GetRdConsumer(Rcpp::StringVector properties, Rcpp::StringVector values);
RcppExport SEXP _rdkafka_GetRdConsumer(SEXP propertiesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type properties(propertiesSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(GetRdConsumer(properties, values));
    return rcpp_result_gen;
END_RCPP
}
// RdSubscribe
int RdSubscribe(SEXP consumerPtr, const Rcpp::StringVector Rtopics);
RcppExport SEXP _rdkafka_RdSubscribe(SEXP consumerPtrSEXP, SEXP RtopicsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type consumerPtr(consumerPtrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::StringVector >::type Rtopics(RtopicsSEXP);
    rcpp_result_gen = Rcpp::wrap(RdSubscribe(consumerPtr, Rtopics));
    return rcpp_result_gen;
END_RCPP
}
// KafkaConsume
Rcpp::List KafkaConsume(SEXP consumerPtr, int numResults, int timeout_ms);
RcppExport SEXP _rdkafka_KafkaConsume(SEXP consumerPtrSEXP, SEXP numResultsSEXP, SEXP timeout_msSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type consumerPtr(consumerPtrSEXP);
    Rcpp::traits::input_parameter< int >::type numResults(numResultsSEXP);
    Rcpp::traits::input_parameter< int >::type timeout_ms(timeout_msSEXP);
    rcpp_result_gen = Rcpp::wrap(KafkaConsume(consumerPtr, numResults, timeout_ms));
    return rcpp_result_gen;
END_RCPP
}
// GetRdProducer
SEXP GetRdProducer(Rcpp::StringVector properties, Rcpp::StringVector values);
RcppExport SEXP _rdkafka_GetRdProducer(SEXP propertiesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type properties(propertiesSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(GetRdProducer(properties, values));
    return rcpp_result_gen;
END_RCPP
}
// KafkaProduce
int KafkaProduce(SEXP producerPtr, SEXP topic, Rcpp::IntegerVector partition, Rcpp::StringVector keys, Rcpp::StringVector values);
RcppExport SEXP _rdkafka_KafkaProduce(SEXP producerPtrSEXP, SEXP topicSEXP, SEXP partitionSEXP, SEXP keysSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type producerPtr(producerPtrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type topic(topicSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type partition(partitionSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(KafkaProduce(producerPtr, topic, partition, keys, values));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rdkafka_GetRdConsumer", (DL_FUNC) &_rdkafka_GetRdConsumer, 2},
    {"_rdkafka_RdSubscribe", (DL_FUNC) &_rdkafka_RdSubscribe, 2},
    {"_rdkafka_KafkaConsume", (DL_FUNC) &_rdkafka_KafkaConsume, 3},
    {"_rdkafka_GetRdProducer", (DL_FUNC) &_rdkafka_GetRdProducer, 2},
    {"_rdkafka_KafkaProduce", (DL_FUNC) &_rdkafka_KafkaProduce, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_rdkafka(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
