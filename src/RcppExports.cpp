// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// RdKafkaConsumer
SEXP RdKafkaConsumer(Rcpp::StringVector properties, Rcpp::StringVector values);
RcppExport SEXP _rdkafka_RdKafkaConsumer(SEXP propertiesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type properties(propertiesSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(RdKafkaConsumer(properties, values));
    return rcpp_result_gen;
END_RCPP
}
// RdSubscribe
int RdSubscribe(SEXP consumerPtr, Rcpp::StringVector rTopics);
RcppExport SEXP _rdkafka_RdSubscribe(SEXP consumerPtrSEXP, SEXP rTopicsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type consumerPtr(consumerPtrSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type rTopics(rTopicsSEXP);
    rcpp_result_gen = Rcpp::wrap(RdSubscribe(consumerPtr, rTopics));
    return rcpp_result_gen;
END_RCPP
}
// RdConsume
Rcpp::List RdConsume(SEXP consumerPtr, int numResults, int timeoutMs);
RcppExport SEXP _rdkafka_RdConsume(SEXP consumerPtrSEXP, SEXP numResultsSEXP, SEXP timeoutMsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type consumerPtr(consumerPtrSEXP);
    Rcpp::traits::input_parameter< int >::type numResults(numResultsSEXP);
    Rcpp::traits::input_parameter< int >::type timeoutMs(timeoutMsSEXP);
    rcpp_result_gen = Rcpp::wrap(RdConsume(consumerPtr, numResults, timeoutMs));
    return rcpp_result_gen;
END_RCPP
}
// RdAssign
int RdAssign(SEXP consumerPtr, std::string topic, int partition);
RcppExport SEXP _rdkafka_RdAssign(SEXP consumerPtrSEXP, SEXP topicSEXP, SEXP partitionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type consumerPtr(consumerPtrSEXP);
    Rcpp::traits::input_parameter< std::string >::type topic(topicSEXP);
    Rcpp::traits::input_parameter< int >::type partition(partitionSEXP);
    rcpp_result_gen = Rcpp::wrap(RdAssign(consumerPtr, topic, partition));
    return rcpp_result_gen;
END_RCPP
}
// RdConsumePartition
Rcpp::List RdConsumePartition(SEXP consumerPtr, std::string topic, int partition, int numResults, int timeoutMs);
RcppExport SEXP _rdkafka_RdConsumePartition(SEXP consumerPtrSEXP, SEXP topicSEXP, SEXP partitionSEXP, SEXP numResultsSEXP, SEXP timeoutMsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type consumerPtr(consumerPtrSEXP);
    Rcpp::traits::input_parameter< std::string >::type topic(topicSEXP);
    Rcpp::traits::input_parameter< int >::type partition(partitionSEXP);
    Rcpp::traits::input_parameter< int >::type numResults(numResultsSEXP);
    Rcpp::traits::input_parameter< int >::type timeoutMs(timeoutMsSEXP);
    rcpp_result_gen = Rcpp::wrap(RdConsumePartition(consumerPtr, topic, partition, numResults, timeoutMs));
    return rcpp_result_gen;
END_RCPP
}
// RdKafkaProducer
SEXP RdKafkaProducer(Rcpp::StringVector properties, Rcpp::StringVector values);
RcppExport SEXP _rdkafka_RdKafkaProducer(SEXP propertiesSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type properties(propertiesSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(RdKafkaProducer(properties, values));
    return rcpp_result_gen;
END_RCPP
}
// RdProduce
int RdProduce(SEXP producerPtr, SEXP topic, Rcpp::IntegerVector partitions, Rcpp::StringVector keys, Rcpp::StringVector payloads);
RcppExport SEXP _rdkafka_RdProduce(SEXP producerPtrSEXP, SEXP topicSEXP, SEXP partitionsSEXP, SEXP keysSEXP, SEXP payloadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type producerPtr(producerPtrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type topic(topicSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type partitions(partitionsSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type keys(keysSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type payloads(payloadsSEXP);
    rcpp_result_gen = Rcpp::wrap(RdProduce(producerPtr, topic, partitions, keys, payloads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rdkafka_RdKafkaConsumer", (DL_FUNC) &_rdkafka_RdKafkaConsumer, 2},
    {"_rdkafka_RdSubscribe", (DL_FUNC) &_rdkafka_RdSubscribe, 2},
    {"_rdkafka_RdConsume", (DL_FUNC) &_rdkafka_RdConsume, 3},
    {"_rdkafka_RdAssign", (DL_FUNC) &_rdkafka_RdAssign, 3},
    {"_rdkafka_RdConsumePartition", (DL_FUNC) &_rdkafka_RdConsumePartition, 5},
    {"_rdkafka_RdKafkaProducer", (DL_FUNC) &_rdkafka_RdKafkaProducer, 2},
    {"_rdkafka_RdProduce", (DL_FUNC) &_rdkafka_RdProduce, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_rdkafka(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
